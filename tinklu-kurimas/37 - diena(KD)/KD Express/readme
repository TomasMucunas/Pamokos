Задача: система управления книгами и авторами Express.js
Цель
Разработать систему управления книгами и авторами на базе Express.js, включающую:

CRUD-функциональность для книг и авторов.
Авторизацию с функциями регистрации, входа и контроля доступа.
Валидация данных (проверка данных о книгах и авторах).
Управление ошибками (с подробными ответами на ошибки).
Взаимосвязь между книгами и авторами, чтобы у каждой книги был свой автор, а у автора могло быть несколько книг.
Требования
Технология:

Node.js с Express.js.
PostgreSQL.
Авторизация: токен JWT, cookies.
Валидация: использование библиотекиexpress-validator.
Управление ошибками: централизованное управление ошибками с соответствующими кодами состояния HTTP и сообщениями о том, какая ошибка произошла.
Модель/таблица книги:

название (строка, обязательно, не менее 3 символов).
краткое содержание (строка, необязательно).
isbn (уникальная строка, обязательная, 10 цифр, не может содержать пробелы или специальные символы, может содержать ведущие тире «-», не может содержать буквы, только цифры).
authorId (ссылка на идентификатор автора, обязательно).
Модель/таблица автора:

имя (строка, обязательно, не менее 2 символов).
дата рождения (дата, обязательная, формат YYYY-MM-DD).
биография (строка, необязательно, не более 150 символов).
Модель/таблица пользователя (для авторизации):

имя пользователя (уникальная строка, обязательно).
пароль (хэшированная строка, обязательно).
роль ('пользователь', 'администратор').
Функциональность
Авторизация:

Регистрация (POST /auth/register): создание нового пользователя. ** 1 балл **.
Вход (POST /auth/login): генерация JWT только после входа в систему. ** 2 балла **
Только пользователи с ролью администратора могут создавать, обновлять и удалять авторов или книги. ** 2 балла **
CRUD-операции:

Авторы:
GET /authors: Получение списка всех авторов. ** 0,5 балла **
GET /authors/:id: Получение информации об авторе по его ID. ** 0,5 балла **
POST /authors: Создать нового автора (только для администраторов). ** 0,5 балла **
PATCH /authors/:id: обновление информации об авторе (только для администраторов). ** 0,5 балла **
DELETE /authors/:id: удаление автора (только для администраторов). ** 0,5 балла **
Книги:
GET /books: Получить список всех книг. ** 0,5 балла **
GET /books/:id: Получить информацию о книге по идентификатору. ** 0,5 балла **
POST /books: Создать новую книгу (только для администраторов). ** 0,5 балла **
PATCH /books/:id: Обновление информации о книге (только для администраторов). ** 0,5 балла **
DELETE /books/:id: удалить книгу (только для администраторов). ** 0,5 балла **
Подключения к БД:

При создании книги необходимо указать ID автора. Если автор не существует, система должна вернуть ошибку. ** 1 балл **
Запросы к книгам (GET /books и GET /books/:id) должны возвращать информацию о книге с полной информацией об авторе. ** 2 балла ** - Запросы к авторам (GET /authors и GET /authors/:id) должны возвращать информацию об авторе со списком его книг. ** 2 балла **
Поиск и фильтрация:

Возможность поиска книг по названию, когда поисковая фраза находится в названии книги, но не обязательно в полном названии (GET /books?title=...). ** 2 балла **
Фильтрация по автору, выбор книг определенного автора (GET /books?authorId=...). ** 2 балла **
Пагинация:

Реализовать пагинацию в списке книг (GET /books?page=1&limit=10). ** 1 балл**.
Презентация:
Отправьте код на ссылку github на платформе команды, к заданию.

Отправьте конечные точки для тестирования в postman, экспортируйте и прикрепите файл из postman в teams.

Общая возможная оценка составляет 20 баллов, что эквивалентно 10 баллам.

Переведено с помощью DeepL.com (бесплатная версия)