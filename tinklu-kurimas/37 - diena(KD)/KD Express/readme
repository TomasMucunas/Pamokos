Užduotis: Express.js knygų ir autorių valdymo sistema
Tikslas
Sukurti knygų ir autorių valdymo sistemą, paremtą Express.js, įskaitant:

CRUD funkcijas knygoms ir autoriams.
Autorizavimas su registracijos, prisijungimo ir prieigos kontrolės funkcijomis.
Duomenų patvirtinimą (knygų ir autorių duomenų tikrinimą).
Klaidų valdymas (su išsamiais atsakymais į klaidas).
Knygų ir autorių tarpusavio ryšys, kad kiekviena knyga galėtų turėti savo autorių, o autorius - kelias knygas.
Reikalavimai
Technologijos:

Node.js su Express.js.
PostgreSQL.
Autorizacija: JWT simbolis, slapukai.
Patvirtinimas: validatoriaus bibliotekos naudojimas.
Klaidų valdymas: centralizuotas klaidų valdymas su atitinkamais HTTP būsenos kodais ir pranešimais apie tai, kokia klaida įvyko.
Knygos modelis / lentelė:

pavadinimas (eilutė, neprivaloma, ne mažiau kaip 3 ženklai).
santrauka (eilutė, neprivaloma).
isbn (unikali eilutė, privaloma, 10 skaitmenų, negali būti tarpų ar specialiųjų ženklų, gali būti pradinis brūkšnys „-“, negali būti raidžių, tik skaitmenys).
authorId (nuoroda į autoriaus identifikatorių, privaloma).
Autoriaus modelis / lentelė:

name (eilutė, privaloma, ne mažiau kaip 2 ženklai).
gimimo data (data, privaloma, formatas YYYYYY-MM-DD).
biografija (eilutė, neprivaloma, ne daugiau kaip 150 simbolių).
Naudotojo modelis / lentelė (autorizacijai):

naudotojo vardas (unikali eilutė, privaloma).
slaptažodis (slaptažodžių eilutė, privaloma).
vaidmuo („naudotojas“, „administratorius“).
Funkcionalumas
Leidimas:

Registracija (POST /auth/register): naujo naudotojo sukūrimas. ** 1 balas **.
Prisijungimas (POST /auth/login): JWT generavimas tik po prisijungimo. ** 2 balai **.
Tik administratoriaus vaidmenį turintys naudotojai gali kurti, atnaujinti ir ištrinti autorius arba knygas. ** 2 taškai **.
CRUD operacijos:

Autoriai:
GET /authors: Gauti visų autorių sąrašą. ** 0,5 taško **
GET /authors/:id: gauti informaciją apie autorius pagal autoriaus ID. ** 0,5 taško **
POST /authors: Sukurti naują autorių (tik administratoriams). ** 0,5 taško **
PATCH /authors/:id: Atnaujinti informaciją apie autorių (tik administratoriams). ** 0,5 taško **
DELETE /authors/:id: ištrinti autorių (tik administratoriams). ** 0,5 taško **
Knygos:
GET /books: gauti visų knygų sąrašą. ** 0,5 taško ** 0,5 taško ** 0,5 taško **
GET /books/:id: gauti informaciją apie knygą pagal ID. ** 0,5 taško ** 0,5 taško ** 0,5 taško **
POST /books: Sukurti naują knygą (tik administratoriui). ** 0,5 taško ** 0,5 taško ** 0,5 taško
PATCH /books/:id: Atnaujinti knygos informaciją (tik administratoriams). ** 0,5 taško **
DELETE /books/:id: ištrinti knygą (tik administratoriams). ** 0,5 taško **
DB jungtys:

Kuriant knygą turi būti nurodytas autoriaus ID. Jei autorius neegzistuoja, sistema turėtų grąžinti klaidą. ** 1 balas **
Užklausos knygoms (GET /books ir GET /books/:id) turėtų grąžinti knygos informaciją su visa autoriaus informacija. ** 2 balai ** - Užklausos autoriams (GET /authors ir GET /authors/:id) turėtų grąžinti informaciją apie autorių su jo knygų sąrašu. ** 2 balai **
Paieška ir filtravimas:

Galimybė ieškoti knygų pagal pavadinimą, kai paieškos frazė yra knygos pavadinime, bet nebūtinai visas pavadinimas (GET /books?==...). ** 2 balai **
Filtravimas pagal autorių, pasirenkant konkretaus autoriaus knygas (GET /books?authorId=...). ** 2 balai **
Puslapių žymėjimas:

Knygų sąraše įgyvendinkite puslapiavimą (GET /books?page=1&limit=10). ** 1 balas**.
Pristatymas:
Pateikite kodą komandos platformoje esančioje „github“ nuorodoje, prie užduoties.

Pateikite galinius taškus į postman testavimui, eksportuokite ir pridėkite failą iš postman komandoms.

Bendras galimas įvertinimas yra 20 taškų, tai atitinka 10 balų.
